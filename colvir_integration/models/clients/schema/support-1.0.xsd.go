// Code generated by xgen. DO NOT EDIT.

package schema

// StatusRequestElem ...
type StatusRequestElem *CommonStatusRequest

// StatusResponseElem ...
type StatusResponseElem *CommonStatusResponse

// RequestHeader is number of testCase
type RequestHeader struct {
	RequestId string         `xml:"v11:requestId,omitempty"`
	SessionId string         `xml:"v11:sessionId,omitempty"`
	ProcessId string         `xml:"v11:processId,omitempty"`
	Params    *SessionParams `xml:"v11:params,omitempty"`
	StartRow  int            `xml:"v11:startRow,omitempty"`
	MaxRows   int            `xml:"v11:maxRows,omitempty"`
	TestCase  string         `xml:"v11:testCase,omitempty"`
}

// AuthenticationTokenContent is Reasonable token length limit.
type AuthenticationTokenContent []byte

// AuthenticationTokenType is Result of the last authentication phase. Token to access service bus with.
type AuthenticationTokenType string

// ConnectParameterType is ColvirReferenceId договора ДБО (CLIBNK), по которому брать позицию для замены
type ConnectParameterType string

// AuthenticationToken is Bus authentication token.
type AuthenticationToken struct {
	TypeAttr string `xml:"type,attr,omitempty"`
	Value    []byte `xml:",chardata"`
}

// ConnectParameter is parameter VALUE
type ConnectParameter struct {
	Code  string `xml:"v11:code"`
	Value string `xml:"v11:value"`
}

// SessionParams is Дополнительные параметры для открытия сессии.
type SessionParams struct {
	ClientType       string               `xml:"v11:clientType,omitempty"`
	InterfaceVersion string               `xml:"v11:interfaceVersion,omitempty"`
	Language         string               `xml:"v11:language,omitempty"`
	OperationalDate  string               `xml:"v11:operationalDate,omitempty"`
	ClientTimeout    int                  `xml:"v11:clientTimeout,omitempty"`
	Token            *AuthenticationToken `xml:"v11:token,omitempty"`
	ConnectParameter []*ConnectParameter  `xml:"v11:connectParameter,omitempty"`
}

// CommonFaultData is Data
type CommonFaultData struct {
	Message string `xml:"v11:message"`
	Data    string `xml:"v11:data"`
}

// AbstractRequest is Request header
type AbstractRequest struct {
	Head *RequestHeader `xml:"v11:head"`
}

// ResultCode is Error
type ResultCode int

// LongRunningProcessResponse is Request processing route in cis@host1:port1[/cbs@host2:port2] format
type LongRunningProcessResponse struct {
	ResponseTime   int64  `xml:"v11:responseTime"`
	ResponseDbTime int64  `xml:"v11:responseDbTime"`
	RequestId      string `xml:"v11:requestId"`
	Route          string `xml:"v11:route"`
}

// AbstractResponse is Errors
type AbstractResponse struct {
	Code                       int                         `xml:"code"`
	ResponseTime               int64                       `xml:"responseTime"`
	ResponseDbTime             int64                       `xml:"responseDbTime"`
	LongRunningProcessResponse *LongRunningProcessResponse `xml:"LongRunningProcessResponse"`
	RequestId                  string                      `xml:"requestId"`
	Route                      string                      `xml:"route"`
	Errors                     []*ErrorMessage             `xml:"errors"`
}

// AbstractParseResult is Package reference
type AbstractParseResult struct {
	PackageReference string `xml:"v11:packageReference"`
}

// ValidationResponse is Validation errors
type ValidationResponse struct {
	ValidationMessage []*ValidationMessage `xml:"v11:validationMessage"`
}

// BaseSearchResult is More records/pages available
type BaseSearchResult struct {
	MoreRecsAvailable bool `xml:"v11:moreRecsAvailable"`
}

// ValueListResult is Value list
type ValueListResult struct {
	Value []float64 `xml:"v11:value"`
	*BaseSearchResult
}

// ErrorMessage is Severity
type ErrorMessage struct {
	Code      string   `xml:"v11:code"`
	Message   string   `xml:"v11:message"`
	Parameter []string `xml:"v11:parameter"`
	Context   string   `xml:"v11:context"`
	Severity  string   `xml:"v11:severity"`
}

// ValidationMessage is Validation message
type ValidationMessage struct {
	*ErrorMessage
}

// Severity is Error message
type Severity string

// ConnectionStatus is Message
type ConnectionStatus struct {
	Code    string `xml:"v11:code"`
	Message string `xml:"v11:message"`
}

// LanguageCode is Kazakh
type LanguageCode string

// FileEncoding is UTF-8
type FileEncoding string

// FileParseMode is Decode and execute
type FileParseMode string

// ResultRawString is Result string
type ResultRawString struct {
	Value string `xml:"v11:value"`
}

// CommonStatusRequest ...
type CommonStatusRequest struct {
	Code string `xml:"v11:code"`
	AbstractRequest
}

// CommonStatusResponse is Текстовая информация о статусе
type CommonStatusResponse struct {
	Status string `xml:"status"`
}

// AbstractListResponse ...
type AbstractListResponse struct {
	PageInfo *PageInfo `xml:"pageInfo"`
	AbstractResponse
}

// PageInfo is Has more pages
type PageInfo struct {
	Start   int  `xml:"v11:start"`
	Next    int  `xml:"v11:next"`
	Loaded  int  `xml:"v11:loaded"`
	Total   int  `xml:"v11:total"`
	HasMore bool `xml:"v11:hasMore"`
}
