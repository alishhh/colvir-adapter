// Code generated by xgen. DO NOT EDIT.

package statements

import (
	"encoding/xml"
	"gitlab.apps.bcc.kz/digital-banking-platform/adapters/dbp-colvir-adapter-cap/colvir_integration/models/schema"
)

type LoadColvirReportDataBody struct {
	XMLName xml.Name `xml:"soapenv:Body"`
	Elem LoadColvirReportDataElem
}

// LoadColvirReportDataElem ...
type LoadColvirReportDataElem struct {
	XMLName      xml.Name `xml:"v1:loadColvirReportDataElem"`
	*schema.AbstractRequest
	ReportCode   string   `xml:"v1:reportCode"`
	Encoding     string   `xml:"v1:encoding,omitempty"`
	ReportParams string   `xml:"v1:reportParams"`
	RawFormat    bool     `xml:"v1:rawFormat"`
}

// LoadColvirReportDataResponseElem ...
type LoadColvirReportDataResponseElem struct {
	XMLName xml.Name              `xml:"v1:loadColvirReportDataResponseElem"`
	Result  *CReportDetailsResult `xml:"v1:result"`
	*schema.AbstractResponse
}

// LoadColvirReportDetailsElem ...
type LoadColvirReportDetailsElem struct {
	XMLName    xml.Name `xml:"v1:loadColvirReportDetailsElem"`
	ReportCode string   `xml:"v1:reportCode"`
	*schema.AbstractRequest
}

// LoadColvirReportDetailsResponseElem ...
type LoadColvirReportDetailsResponseElem struct {
	XMLName xml.Name              `xml:"v1:loadColvirReportDetailsResponseElem"`
	Result  *CReportDetailsResult `xml:"v1:result"`
	*schema.AbstractResponse
}

// LoadColvirReportFileElem ...
type LoadColvirReportFileElem struct {
	XMLName      xml.Name `xml:"v1:loadColvirReportFileElem"`
	FileEncoding string   `xml:"v1:fileEncoding"`
	Format       string   `xml:"v1:format"`
	ReportCode   string   `xml:"v1:reportCode"`
	ReportParams string   `xml:"v1:reportParams"`
	*schema.AbstractRequest
}

// LoadColvirReportFileResponseElem ...
type LoadColvirReportFileResponseElem struct {
	XMLName xml.Name           `xml:"v1:loadColvirReportFileResponseElem"`
	Result  *CReportFileResult `xml:"v1:result"`
	*schema.AbstractResponse
}

// LoadColvirReportFileForDirectDataElem ...
type LoadColvirReportFileForDirectDataElem struct {
	XMLName   xml.Name `xml:"v1:loadColvirReportFileForDirectDataElem"`
	Encoding  string   `xml:"v1:encoding"`
	Format    string   `xml:"v1:format"`
	Generator string   `xml:"v1:generator"`
	Data      []byte   `xml:"v1:data"`
	Template  []byte   `xml:"v1:template"`
	*schema.AbstractRequest
}

// LoadColvirReportFileForDirectDataResponseElem ...
type LoadColvirReportFileForDirectDataResponseElem struct {
	XMLName xml.Name `xml:"v1:loadColvirReportFileForDirectDataResponseElem"`
	Report  []byte   `xml:"v1:report"`
	*schema.AbstractResponse
}

// LoadColvirReportTemplateElem ...
type LoadColvirReportTemplateElem struct {
	XMLName      xml.Name `xml:"v1:loadColvirReportTemplateElem"`
	ReportCode   string   `xml:"v1:reportCode"`
	TemplateType string   `xml:"v1:templateType"`
	*schema.AbstractRequest
}

// LoadColvirReportTemplateResponseElem ...
type LoadColvirReportTemplateResponseElem struct {
	XMLName xml.Name              `xml:"v1:loadColvirReportTemplateResponseElem"`
	Result  *CReportDetailsResult `xml:"v1:result"`
	*schema.AbstractResponse
}

// LoadColvirReportsListElem ...
type LoadColvirReportsListElem struct {
	XMLName xml.Name `xml:"v1:loadColvirReportsListElem"`
	Filter  string   `xml:"v1:filter"`
	*schema.AbstractRequest
}

// LoadColvirReportsListResponseElem ...
type LoadColvirReportsListResponseElem struct {
	XMLName xml.Name                 `xml:"v1:loadColvirReportsListResponseElem"`
	Result  *CReportListSearchResult `xml:"v1:result"`
	*schema.AbstractResponse
}

// SaveColvirReportTemplateElem ...
type SaveColvirReportTemplateElem struct {
	XMLName      xml.Name `xml:"v1:saveColvirReportTemplateElem"`
	Context      string   `xml:"v1:context"`
	ReportCode   string   `xml:"v1:reportCode"`
	TemplateType string   `xml:"v1:templateType"`
	*schema.AbstractRequest
}

// SaveColvirReportTemplateResponseElem ...
type SaveColvirReportTemplateResponseElem struct {
	XMLName xml.Name                   `xml:"v1:saveColvirReportTemplateResponseElem"`
	Result  *CReportTemplateSaveResult `xml:"v1:result"`
	*schema.AbstractResponse
}

// GeneratorType is Report generator type
type GeneratorType string

// ReportExtFormat is Report type
type ReportExtFormat string

// CReportItem is avaliableTemplates
type CReportItem struct {
	Code                   string `xml:"v1:code"`
	Name                   string `xml:"v1:name"`
	Description            string `xml:"v1:description"`
	LongName               string `xml:"v1:longName"`
	LastModified           string `xml:"v1:lastModified"`
	FileName               string `xml:"v1:fileName"`
	TemplateType           string `xml:"v1:templateType"`
	ReportType             string `xml:"v1:reportType"`
	ReportTemplate         string `xml:"v1:reportTemplate"`
	ReportData             string `xml:"v1:reportData"`
	ReportCompiledTemplate []byte `xml:"v1:reportCompiledTemplate"`
	AvaliableTemplates     string `xml:"v1:avaliableTemplates"`
}

// CReportDetailsResult is Report list
type CReportDetailsResult struct {
	CReportItem *CReportItem `xml:"v1:cReportItem"`
}

// CReportFileResult is Files returned
type CReportFileResult struct {
	File []string `xml:"v1:file"`
}

// CReportListSearchResult is Report list
type CReportListSearchResult struct {
	CReport []*CReportItem `xml:"v1:cReport"`
	*schema.BaseSearchResult
}

// CReportTemplateSaveResult is Report code
type CReportTemplateSaveResult struct {
	SaveResult *schema.DomainValue `xml:"v1:saveResult"`
	ReportCode string       `xml:"v1:reportCode"`
	*schema.ValidationResponse
}
